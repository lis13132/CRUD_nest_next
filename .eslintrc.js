module.exports = {
  parser: '@typescript-eslint/parser',
  parserOptions: {
    project: 'tsconfig.json',
    sourceType: 'module',
    createDefaultProgram: true,
  },
  plugins: [
    '@typescript-eslint/eslint-plugin',
    'import',
  ],
  extends: [
    'plugin:@typescript-eslint/recommended',
    'plugin:import/errors',
    'plugin:import/typescript',
  ],
  root: true,
  env: {
    node: true,
  },
  rules: {
    'indent': ['error', 2, { "ignoredNodes": ["PropertyDefinition"], }],
    'import/no-unresolved': 0,
    'no-console': 'error',
    '@typescript-eslint/explicit-function-return-type': 'error',
    '@typescript-eslint/no-unused-vars': [ 'error', { 'argsIgnorePattern': '^type$|^context$', }, ],
    '@typescript-eslint/comma-spacing': [ 'error', ],
    '@typescript-eslint/default-param-last': 'error',
    '@typescript-eslint/no-dupe-class-members': 'error',
    '@typescript-eslint/no-empty-function': [ 'error', { 'allow': [ 'protected-constructors', 'private-constructors', ], }, ],
    '@typescript-eslint/no-extra-parens': 'warn',
    '@typescript-eslint/no-unused-expressions': 'error',
    '@typescript-eslint/no-use-before-define': 'error',
    '@typescript-eslint/require-await': 'error',
    '@typescript-eslint/semi': [ 'error', ],
    '@typescript-eslint/array-type': [ 'error', { 'default' : 'generic', 'readonly': 'generic', }, ],
    'object-curly-spacing': [ 'error', 'always', ],
    'array-bracket-spacing': [ 'error', 'always', ],
    'computed-property-spacing': [ 'error', 'never', ],
    '@typescript-eslint/quotes': [ 'error', 'single', { 'avoidEscape': true, }, ],
    '@typescript-eslint/no-explicit-any': 'error',
    'no-return-await': 'error',
    'keyword-spacing': 'error',
    'comma-dangle': [ 'error', {
      'arrays': 'always',
      'objects': 'always',
      'imports': 'never',
      'exports': 'never',
      'functions': 'never',
    }, ],
    'eol-last': [ 'error', 'always', ],
    'template-curly-spacing': [ 'error', 'never', ],
    'max-len':  ['error', {
      'code': 155,
      'ignorePattern': '(@)|(return)',
      'ignoreTemplateLiterals': true,
    }, ],
    'no-spaced-func': 'error',
    'no-multi-spaces': 'error',
    'require-await': 'error',
    'no-trailing-spaces': 'error',
    'operator-linebreak': [ 'error', 'after', ],
    'no-multiple-empty-lines': [ 'error', { max: 1, maxEOF: 0, maxBOF: 0, }, ],
    'no-extra-boolean-cast': 'error',
    'no-else-return': 'error',
    'no-duplicate-imports': 'error',
    'import/no-useless-path-segments': 'error',
    'space-before-blocks': 'error',
    'space-before-function-paren': [ 'warn', 'never', ],
    '@typescript-eslint/class-name-casing': 'off',
    '@typescript-eslint/naming-convention': [
      'error',
      {
        selector: 'variable',
        format: [ 'camelCase', 'UPPER_CASE', 'PascalCase', ],
      },
      {
        selector: 'function',
        format: [ 'camelCase', 'PascalCase', ],
      },
      {
        selector: 'typeLike',
        format: [ 'PascalCase', ],
        filter: {
          regex: '^[a-zA-Z]+\\d{13}$$',
          match: false,
        },
      },
      {
        selector: 'enum',
        format: [ 'PascalCase', ],
      },
    ],
  },
};